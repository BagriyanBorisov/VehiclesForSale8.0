// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehiclesForSale.Data;

#nullable disable

namespace VehiclesForSale.Data.Migrations
{
    [DbContext(typeof(VehiclesDbContext))]
    [Migration("20230730125509_addedConfigurationUpdateForExtras")]
    partial class addedConfigurationUpdateForExtras
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f6c17bd-c27e-4706-8159-1a8675d387df",
                            Email = "Pesho.peshev@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "pesho",
                            PasswordHash = "AQAAAAEAACcQAAAAEAp7rqZYnIT03STIruObP6EJN1rcLgbTaD2+yRuq8DU4JXTtn7Dy/w4vESKOrxFxCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "145afc57-a6f9-4164-bb4b-255db3403953",
                            TwoFactorEnabled = false,
                            UserName = "Pesho"
                        },
                        new
                        {
                            Id = "a123as23-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92a78097-2d2b-47d4-9d0b-6a31c6d2b1f0",
                            Email = "Gosho.goshev@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "gosho",
                            PasswordHash = "AQAAAAEAACcQAAAAEHQrATugH+XAYfZ9fqkFA/rS4L62/q7WhODLUVhdA0vq+zh3BlUlaISUqKZTrGdtIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c8e5789-2666-4213-b9d9-e2e8f9012e9c",
                            TwoFactorEnabled = false,
                            UserName = "Gosho"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.CategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CategoryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MUV"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pickup Truck"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "White"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brown"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Beige"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Yellow"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.ComfortExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.ToTable("ComfortExtras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExtraId = 0,
                            Name = "Multi-Zone Climate Control"
                        },
                        new
                        {
                            Id = 2,
                            ExtraId = 0,
                            Name = "Power-adjustable Seats with Memory Function"
                        },
                        new
                        {
                            Id = 3,
                            ExtraId = 0,
                            Name = "Heated and Ventilated Seats"
                        },
                        new
                        {
                            Id = 4,
                            ExtraId = 0,
                            Name = "Adaptive Cruise Control"
                        },
                        new
                        {
                            Id = 5,
                            ExtraId = 0,
                            Name = "Power Lift gate or Hands-Free Lift gate"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.ExteriorExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.ToTable("ExteriorExtras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExtraId = 0,
                            Name = "LED Headlights"
                        },
                        new
                        {
                            Id = 2,
                            ExtraId = 0,
                            Name = "Power-Folding Side Mirrors"
                        },
                        new
                        {
                            Id = 3,
                            ExtraId = 0,
                            Name = "Panoramic Roof"
                        },
                        new
                        {
                            Id = 4,
                            ExtraId = 0,
                            Name = "Roof Rails"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.InteriorExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.ToTable("InteriorExtras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExtraId = 0,
                            Name = "Heated Seats"
                        },
                        new
                        {
                            Id = 2,
                            ExtraId = 0,
                            Name = "Panoramic Sunroof"
                        },
                        new
                        {
                            Id = 3,
                            ExtraId = 0,
                            Name = "Infotainment System"
                        },
                        new
                        {
                            Id = 4,
                            ExtraId = 0,
                            Name = "Key less Entry and Push-Button Start"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.OtherExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.ToTable("OtherExtras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExtraId = 0,
                            Name = "LPG"
                        },
                        new
                        {
                            Id = 2,
                            ExtraId = 0,
                            Name = "4x4"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.SafetyExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.ToTable("SafetyExtras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExtraId = 0,
                            Name = "Anti-lock Braking System (ABS)"
                        },
                        new
                        {
                            Id = 2,
                            ExtraId = 0,
                            Name = "Electronic Stability Control (ESC)"
                        },
                        new
                        {
                            Id = 3,
                            ExtraId = 0,
                            Name = "Blind Spot Monitoring (BSM) System"
                        },
                        new
                        {
                            Id = 4,
                            ExtraId = 0,
                            Name = "Lane Departure Warning (LDW)"
                        },
                        new
                        {
                            Id = 5,
                            ExtraId = 0,
                            Name = "Lane Keeping Assist (LKA)"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.FavoriteVehicleApplicationUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FavoriteVehicleApplicationUsers");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gasoline"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Diesel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electric"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hybrid(D/E)"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hybrid(G/E)"
                        },
                        new
                        {
                            Id = 6,
                            Name = "LPG"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Makes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Volkswagen"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MakeId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MakeId = 1,
                            Name = "W211"
                        },
                        new
                        {
                            Id = 2,
                            MakeId = 1,
                            Name = "W209"
                        },
                        new
                        {
                            Id = 3,
                            MakeId = 1,
                            Name = "W203"
                        },
                        new
                        {
                            Id = 4,
                            MakeId = 1,
                            Name = "W219"
                        },
                        new
                        {
                            Id = 5,
                            MakeId = 2,
                            Name = "E46"
                        },
                        new
                        {
                            Id = 6,
                            MakeId = 2,
                            Name = "E60"
                        },
                        new
                        {
                            Id = 7,
                            MakeId = 2,
                            Name = "E90"
                        },
                        new
                        {
                            Id = 8,
                            MakeId = 2,
                            Name = "E39"
                        },
                        new
                        {
                            Id = 9,
                            MakeId = 3,
                            Name = "A3"
                        },
                        new
                        {
                            Id = 10,
                            MakeId = 3,
                            Name = "A4"
                        },
                        new
                        {
                            Id = 11,
                            MakeId = 3,
                            Name = "A5"
                        },
                        new
                        {
                            Id = 12,
                            MakeId = 3,
                            Name = "A6"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.TransmissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TransmissionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Automatic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CVT"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Semi-Automatic"
                        });
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("CubicCapacity")
                        .HasColumnType("int");

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<long>("Mileage")
                        .HasColumnType("bigint");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("TransmissionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("MakeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TransmissionTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.ComfortExtra", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", "Extra")
                        .WithMany("ComfortExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.ExteriorExtra", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", "Extra")
                        .WithMany("ExteriorExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.InteriorExtra", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", "Extra")
                        .WithMany("InteriorExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.OtherExtra", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", "Extra")
                        .WithMany("OtherExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.SafetyExtra", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", "Extra")
                        .WithMany("SafetyExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Extra");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.FavoriteVehicleApplicationUser", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FavoriteVehicleApplicationUsers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Vehicle", "Vehicle")
                        .WithMany("FavoriteVehicleApplicationUsers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Image", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Vehicle", "Vehicle")
                        .WithMany("ImageCollection")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Model", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Make", "Make")
                        .WithMany("Models")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Vehicle", b =>
                {
                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.CategoryType", "CategoryType")
                        .WithMany()
                        .HasForeignKey("CategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.Model", "Model")
                        .WithMany("VehiclesFromModel")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.ApplicationUser", "Owner")
                        .WithMany("VehiclesCollectionForSale")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehiclesForSale.Data.Models.VehicleModel.TransmissionType", "TransmissionType")
                        .WithMany()
                        .HasForeignKey("TransmissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryType");

                    b.Navigation("Color");

                    b.Navigation("Extra");

                    b.Navigation("FuelType");

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("Owner");

                    b.Navigation("TransmissionType");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteVehicleApplicationUsers");

                    b.Navigation("VehiclesCollectionForSale");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Extras.Extra", b =>
                {
                    b.Navigation("ComfortExtras");

                    b.Navigation("ExteriorExtras");

                    b.Navigation("InteriorExtras");

                    b.Navigation("OtherExtras");

                    b.Navigation("SafetyExtras");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Make", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Model", b =>
                {
                    b.Navigation("VehiclesFromModel");
                });

            modelBuilder.Entity("VehiclesForSale.Data.Models.VehicleModel.Vehicle", b =>
                {
                    b.Navigation("FavoriteVehicleApplicationUsers");

                    b.Navigation("ImageCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
